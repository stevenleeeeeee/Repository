ref:
https://blog.csdn.net/wuliusir/article/details/50760480
https://www.cnblogs.com/along1226/p/5027838.html

------------------------------------------------------------------------ 

global_defs {
   notification_email {
       inmoonlight@163.com
   }
   notification_email_from inmoonlight@163.com          # 注意开启内核的路由转发功能! ...
   smtp_server smtp.exmail.163.com
   smtp_connect_timeout 30
   router_id LVS_DEVEL_SERVER_1
}

vrrp_script Monitor_nginx {
    script "/data/monitor_nginx.sh"                     # demo --> script "[[ command ]] && exit 0 || exit 1"
    interval 5
    weight -10                                          # 检测DR健康状态，失效时减去指定权重值
}

#确定失败切换（FailOver）包含的路由实例个数
#即在有2个负载均衡器的场景，一旦某个负载均衡器失效，需自动切换到另一个负载均衡器的实例是哪些
#实例组group{}至少包含一个vrrp实例
vrrp_sync_group VG_1 {
    group {
       VI_1             # 将多个VIP同步漂移，常见于当切换时外网VIP与其内网RS指向的DIP均进行漂移
       #VI_2...         # 注：LVS的NAT模型下，RS网关指向的DIP与VIP同步漂移
    }
    notify_master /path/to/to_master.sh                 # 节点变为master时执行
    notify_backup /path_to/to_backup.sh                 # 节点变为backup时执行
    notify_fault "/path/fault.sh VG_1"                  # 节点变为故障时执行
    notify /path/to/notify.sh
    smtp_alert
}

#实例名出自实例组group所包含的那些名字
vrrp_instance VI_1 {
    state BACKUP
    interface eth0                                      # 实例绑定的网卡
    virtual_router_id 51
    priority 80                                         # VRRP优先级
    advert_int 2
    mcast_src_ip 224.0.0.18                             # 多VRRP实例时需在每个实例内定义不同的组播地址
    sorry_server  <IP> <PORT>                           # 当所有RS宕机时代理至此地址

    authentication {
        auth_type PASS
        auth_pass 123456
    }
    
    track_interface {                                   # 设置额外的监控，里面哪个网卡出现问题都会切换
        eth0
        eth1
    }
    
    track_script {
        Monitor_nginx                                   # 调用 vrrp_script 段定义的针对实例 VIP 可用性的检测脚本
    } 
    
    virtual_ipaddress {     
        192.168.220.110/24 dev eth0 label eth0:vip      # 实例VI_1使用的VIP
    }
}

#虚拟服务器virtual_server定义块，是keepalived.conf必不可少的部分
#该部分用来管理LVS，是实现keepalive和LVS相结合的模块。ipvsadm命令可以实现的管理在这里都可以通过参数配置实现
#注意：real_server是被包含在virtual_server模块中的
virtual_server 192.168.220.110 80 {                     # 若仅使用其VIP高可用功能则不需要定义LB与后端RS...
     delay_loop 6
     lb_algo wrr
     lb_kind DR                                         # 使用DR模型，后端RS需设置VIP并保持网卡ARP静默
     nat_mask 255.255.255.0
     persistence_timeout 300
     protocol TCP
     
     #RS的真实IP地址
     real_server 192.168.220.128 80 {
          weight 1                                                  # 默认为1,0为失效
          inhibit_on_failure                                        # 健康检查失效时将其设为0，而不是直接从ipvs删除
          notify_up <string> | <quoted-string>                      # 在检测到server up后执行脚本 
          notify_down /etc/keepalived/when_TCP_CHECK_fail_run.sh    # 当RS挂掉时执行此脚本（常见于邮件通知）
          TCP_CHECK {
              connect_timeout 8
              nb_get_retry 3
              delay_before_retry 3
              connect_port 80                                       # 健康检测端口，默认为real_server端口
          }
     }

     #RS的真实IP地址
     real_server 192.168.220.129 80 {
          weight 1
          notify_down /etc/keepalived/when_TCP_CHECK_fail_run.sh    # 虚拟服务器down时执行
          HTTP_GET {  
              url {  
                  path /index.html  
                  status_code 200                                    # 返回状态码  
              }  
              connect_timeout 3  
              nb_get_retry 3  
              delay_before_retry 3  
          }  
     }
}

---------------------------------------------------- keepalived

echo 1 > /proc/sys/net/ipv4/ip_forward

---------------------------------------------------- Real server arp_ignore (DR)
#! /bin/bash
vip=192.168.0.38
ifconfig lo:0 $vip broadcast $vip netmask 255.255.255.255 up

route add -host $vip lo:0

echo "1" > /proc/sys/net/ipv4/conf/lo/arp_ignore
echo "2" > /proc/sys/net/ipv4/conf/lo/arp_announce
echo "1" > /proc/sys/net/ipv4/conf/all/arp_ignore
echo "2" > /proc/sys/net/ipv4/conf/all/arp_announce


