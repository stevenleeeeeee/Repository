global
	log 127.0.0.1 local0
	maxconn 20000
	chroot /usr/local/haproxy			
	uid 99								
	gid 99								
	daemon		
	nbproc 1                    #建议默认（在单核心运行）单进程
	pidfile /usr/local/haproxy/run/haproxy.pid
	ulimit-n 65535              #ulimit数量限制 

listen statistics
	bind *:9090		   
	stats enable                #启用状态监控
	stats refresh 2 	    #统计页刷新间隔
	stats uri /haproxy-stats    #监控页访问地址：http://x.x.x.x:#/haproxy-stats
	stats realm status\ HAproxy #监控页提示信息
	stats auth admin:admin      #监控页用户和密码（可多行）
	stats hide-version          #隐藏统计页版本
	stats admin if TRUE         #当满足条件时启/禁用status页面的admin功能（认证成功）

defaults						
	log global                  #定义全局的syslog服务器，每个实例最多定义两个（若使用下面的参数则可省略）
	log 127.0.0.1 local3        #日志文件的输出定向（Rsyslog需对此facilty进行相应设置）
	mode http                   #处理类型（当使用tcp模式时将在c/s间建立全双工且不对报文检查，常用于ssl，ssh，smtp等）
	spread-checks 1	            #对后端server进行健康检查时各检查的错开时间（防止突然并发），范围：0~50s 
	option dontlognull          #不记录健康检查的日志信息	
	option abortonclose         #当负载很高时自动结束当前队列处理较久的连接
	option redispatch           #当serverid对应的服务器挂掉后，强制定向到其他健康服务器
	retries 2                   #2次连接失败就认为后端不可用（主要通过后面的check检查）
	contimeout 5000             #连接超时
				
	clitimeout 50000            #c端连接超时
	srvtimeout 50000            #s端连接超时
	timeout check 2000          #心跳检测超时

	特定HTTP状态的WEB页面提示（此处不存在404，因为404状态仅后端服务器才可以产生）
    	errorfile 403 /etc/haproxy/errorfiles/403.http
    	errorfile 500 /etc/haproxy/errorfiles/500.http 
    	errorfile 502 /etc/haproxy/errorfiles/502.http 
    	errorfile 503 /etc/haproxy/errorfiles/503.http 
    	errorfile 504 /etc/haproxy/errorfiles/504.http
	
frontend HHHHH
	bind 192.168.1.1:80         #监听地址和端口（对外提供服务）
	mode http                   #处理类型
	log global                  #应用全局日志配置（vim /etc/logrotate.conf）
	option httplog        	    #启用记录HTTP请求，会话状态和计时器等功能...
	option httpclose            #每次请求完毕后主动关闭http通道（不支持keep-alive，只能模拟这种模式的实现）
	option forwardfor           #插入X-Forwardfed-For首部，若后端需获得客户ip时（参数：if-none,header,except）
	
	#日志记录设置（格式：capture {request|response header 首部名称 长度）
   	capture request  header Host len 40                 #捕获请求首部
   	capture request  header Content-Length len 10       #
   	capture request  header Referer len 200             #
   	capture response header Server len 40               #
   	capture response header Content-Length len 10       #
   	capture response header Cache-Control len 8         #
	
	#--------ACL策略-------- 
	acl BBX hdr_reg(host) -i ^(www.itnihao.cn|ww1.itnihao.cn)$  #若请求域名满足正则则返回true 忽略大小写：-i 
	acl itnihao_blog hdr_dom(host) -i blog.itnihao.cn   #若请求的域名满足www.itnihao.cn返回true
	acl http_host1 hdr(host) -i itnihao.cn      #若请求域名满足itnihao.cn则返回True
	acl http_host2 hdr_beg(host) -i img. video. download. ftp.	
	acl http_host3 hdr_end(host) -i .cn .com 
	acl file_req url_sub -i killall=            #在请求url中包含killall=，则此控制策略返回true
	acl dir_req url_dir -i allow                #在请求url中存在allow作为部分地址路径，则此控制策略返回True
	acl http_reg url_reg /login?userid=[^&]+    #正则匹配
	acl denyfile path /1.html
	acl url_static path_beg -i /static /images
	acl url_static path_end -i .jpg .gif .png .css .js
	acl missing_cl hdr_cnt(Content-length) eq 0 #当请求的header中Content-length等于0时返回True
	acl local_net src 192.168.0.0/16		#源地址

	http-request allow if local_net itnihao dir_req
	http-request deny if missing_cl denyfile !local_net
	http-request deny				#默认拒绝
	
	reqadd HTTP_TAG1:\ 123456 if dir_req		#添加请求首部
	repadd HTTP_TAG2:\ 654321 if file_req		#添加相应首部
	
	redirect location http://mysite.com/ if !BBX

	block if missing_cl              #当请求中header中Content-length等于0阻止请求返回403 
	block if !file_req || dir_req    #block即阻止（返回403）若不满足策略file_req，或满足策略dir_req则阻止 
	use_backend BBBB if BBX          #当满足BBX的策略时使用BBBB backend 
	use_backend CCCC if BBX          #当满足BBX的策略时使用CCCC backend
                                     	 #由于ACL的配合因此HAproxy适合动静分离...

	default_backend AAAAA            #均不满足时使用默认AAAAA的backend
	
backend AAAAA
	mode http                     	 #处理类型（前后端需要处于同一种模式）
	balance roundrobin            	 #算法（source，roundrobin，leastconn，static-rr）不设则使用默认段配置
	log 127.0.0.1 local3 err      	 #vim /etc/logrotate.conf
	option httpchk GET /index.htm 	 #健康检测（指定心跳检测文件）
	cookie SERVERID insert nocache	 #插入HTTP中Haproxy定义的cookie用于C--HA--S间会话保持
	server node1 192.168.16.2:80 cookie web1 check inter 1500 rise 3 fall 3 weight 1  maxconn 2000
	server node2 192.168.16.3:80 cookie web2 check inter 1500 rise 3 fall 3 weight 2  maxccon 2500
	
	#以上的设置将在HTTP首部中：COOKIE部分将被插入 (insert nocache) haproxy的设置：SERVERID=web[1|2]
	
