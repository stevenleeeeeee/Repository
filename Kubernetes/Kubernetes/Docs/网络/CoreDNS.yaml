#CoreDNS是一个模块化和可插拔的DNS服务器，每个插件都为CoreDNS添加了新功能。这可以通过维护Corefile来配置
#Corefile是CoreDNS配置文件。集群管理员可以修改CoreDNS Corefile的ConfigMap以更改服务发现的工作方式。
#CoreDNS使用以下默认Corefile配置进行安装:

apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors  #错误记录到stdout
        health  #CoreDNS的运行状况报告为http://localhost:8080/health
        kubernetes cluster.local in-addr.arpa ip6.arpa {  #根据Kubernetes服务和pod的IP回复DNS查询
           pods insecure    #用于向后兼容kube-dns
           upstream       #用于解析指向外部主机的服务（外部服务）
           fallthrough in-addr.arpa ip6.arpa
        }
        prometheus :9153    #CoreDNS的度量标准可以在http://localhost:9153/Prometheus格式的指标中找到
        proxy . /etc/resolv.conf  #任何不在Kubernetes集群域内的查询都将转发到预定义的解析器（/etc/resolv.conf）
        cache 30  #启用前端缓存
        loop
        reload  #允许自动重新加载已更改的Corefile。编辑ConfigMap配置后请等待两分钟
        loadbalance #循环DNS负载均衡器，可以在答案中随机化A，AAAA和MX记录的顺序
    }

#例
#如果集群运营商的Consul域服务器位于10.150.0.1，并且所有Consul名称都具有后缀.consul.local。要在CoreDNS中配置它，集群管理员在CoreDNS ConfigMap中创建以下节。

consul.local:53 {
        errors
        cache 30
        proxy . 10.150.0.1
    }

#要明确强制所有非群集DNS查找在172.16.0.1要经过特定的名称服务器，点proxy和upstream对域名服务器，而不是/etc/resolv.conf
proxy .  172.16.0.1
upstream 172.16.0.1

#最终的ConfigMap以及默认Corefile配置如下所示：
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        health
        kubernetes cluster.local in-addr.arpa ip6.arpa {
           pods insecure
           upstream 172.16.0.1
           fallthrough in-addr.arpa ip6.arpa
        }
        prometheus :9153
        proxy . 172.16.0.1
        cache 30
        loop
        reload
        loadbalance
    }
    consul.local:53 {
        errors
        cache 30
        proxy . 10.150.0.1
    }

#注：以下配置仅针对kube-dns
stubDomains(可选) :	  使用DNS后缀键（如“acme.local”）的JSON映射，以及由DNS IP的JSON数组组成的值


# 部署CoreDNS之后还需要修改Kubelet的启动参数、eg：
[Unit]
Description=Kubernetes Kubelet Master
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
Environment=KUBELET_IMAGE_TAG=v1.6.2
ExecStartPre=/usr/bin/mkdir -p /var/log/containers
ExecStart=/opt/bin/kubelet \
  --api-servers=http://127.0.0.1:8080 \
  --register-schedulable=false \
  --cni-conf-dir=/etc/kubernetes/cni/net.d \
  --container-runtime=docker \
  --allow-privileged=true \
  --pod-manifest-path=/etc/kubernetes/manifests \
  --hostname-override=172.16.71.200 \
  --pod-infra-container-image=172.16.80.94/mir/pause-amd64:3.0 \
  --v=3 \
  --cluster-dns=10.3.0.10 \             #指明CoreDNS所在的IP地址
  --cluster-domain=cluster.local. \     #指明搜索域
  --resolv-conf=/etc/resolv.conf
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target

--- # CoreDNS YAML:
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        log stdout
        health
        kubernetes cluster.local 10.3.0.0/24
        proxy . /etc/resolv.conf
        cache 30
    }
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: coredns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: coredns
  template:
    metadata:
      labels:
        k8s-app: coredns
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      containers:
      - name: coredns
        image: coredns/coredns:latest
        imagePullPolicy: Always
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
      dnsPolicy: Default
      volumes:
        - name: config-volume
          configMap:
            name: coredns
            items:
            - key: Corefile
              path: Corefile
---
apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: coredns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
spec:
  selector:
    k8s-app: coredns
  clusterIP: 10.3.0.10
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP