apiVersion: v1              #指定api版本，此值必须在kubectl apiversion中  
kind: Pod                   #指定创建资源的角色/类型  
metadata:                   #资源（即Pod）的元数据/属性  
  name: web04-pod           #Pod的名字，在同一个namespace中必须唯一
  namespace: blue           #pod的所在的Namespace，是对一组资源/对象的抽象集合，如将系统内部的对象划为不同的项目/用户组
                            #Namespace常用来隔离不同的用户，如Kubernetes自带的服务一般运行在kube-system namespace中
  labels:                   #资源标签列表（键值对），Lable可被附加到各种类型资源之上，如：Node，Pod，Service，RC等...
    k8s-app: apache         #用Kubectl过滤标签：kubectl get pods -l 'k8s-app = apache,version != v2,k = v,...'
    version: v1             #用Kubectl过滤标签：kubectl get pods -l 'k8s-app not in (nginx, String1,String2)'
    kubernetes.io/cluster-service: "true"   #若标签带前缀"/"左半部分，若使用此方式那么前缀必须是一个DNS子域
  annotations:              #自定义注解
    - name: String...       #
    kubernetes.io/ingress-bandwidth: 3M #限制Pod的网络带宽 
    kubernetes.io/egress-bandwidth: 4M  #目前只有kubenet网络插件支持限制网络带宽，其他CNI网络插件暂不支持这个功能
spec:                       #specification of the resource content，pod中容器的详细定义
  restartPolicy: Always     #表明该容器一直运行 (默认)，容器退出后会立即创建一个相同的容器（在Pod所在Node本地重启）
                            # 1. Always：只要退出就重启
                            # 2. OnFailure：失败退出时重启（exit code非0）
                            # 3. Never：只要退出就不再重启
  nodeSelector:             #在指定节点运行Pod，需先给节点打好标签："kubectl label nodes <node_name> key=value"  
    zone: node1             # Node Tag Example: "kubectl label nodes node1 zone=node1"
  initContainers:           # These containers are run during pod initialization
  - name: install           # Init Container在所有容器运行之前执行，常用来初始化配置。
      image: busybox
      command:              #执行的命令
      - wget
      - "-O"
      - "/work-dir/index.html"
      - http://kubernetes.io
      volumeMounts:         #挂载...
      - name: workdir       #挂载设备的名字，与volumes[*].name 需对应
        mountPath: "/dir"   #挂载到容器的哪个路径
  containers:               #pod中的容器列表，可以有多个容器
  - name: web04-pod         #容器的名字  
    image: web:apache       #容器使用的镜像地址
    hostNetwork: false      #是否使用主机网络模式，默认否
    imagePullPolicy: Never  #有如下三个选择，每次启动时从registery检查和更新images的策略
                            # 1. Always：每次都检查，不管镜像是否存在都进行一次拉取
                            # 2. Never：每次都不检查且不论本地是否存在
                            # 3. IfNotPresent：若本地有就不检查/无则拉取，默认（latest标签的镜像默认为Always）
    command: ['sh']         #启动容器的命令，将覆盖容Entrypoint，不配置的话还是使用镜像内部的命令
    args: ["$(str)"]        #启动容器的命令参数，对应Dockerfile中CMD参数
    workingDir: /           #容器的工作目录
    env:                    #指定容器中的环境变量  
    - name: str             #变量key，因环境变量存在创建顺序局限性（其不包含后来创建的服务）因此推荐用DNS来解析服务
      value: "/etc/run.sh"  #变量value，"进入pod内的容器查看ENV：kubectl exec -it demo -- /bin/bash"
    resources:              #硬件资源管理，通过cgroups限制容器的CPU和内存等计算资源
      requests:             #容器运行时最低资源需求，即最少需多少资源容器才能正常运行  
        cpu: 0.1            #CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）
        #cpu: "300m"        #30%的CPU使用率
        memory: "256Mi"     #内存用量 
      limits:               #资源硬限制，相当于阈值，若超出则被KILL并重启
        cpu: "500m"         #CPU单位是milicpu，500mcpu=0.5cpu
        memory: "512Mi"     #内存的单位包括E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki等
    ports:                  #Endpoint ---> (PodIP + ContainetPort)
    - containerPort: 80     #容器开发对外的端口，通过pod的IP及此端口进行访问
      name: httpd           #名称
      protocol: TCP  
      hostPort: 80          #容器所在主机监听的端口（容器暴露端口映射到宿主机的端口）
    livenessProbe:          #Pod内容器健康检查的探针设置
      initialDelaySeconds: 180  #第一次检测在容器启动后多长时间后开始  
      timeoutSeconds: 5         #检测超时时间  
      periodSeconds: 15         #检查间隔时间   
      httpGet:              #通过httpget检查健康，返回200-399之间，则认为容器正常  
        path: /             #URI地址  
        port: 80  
        #host: 127.0.0.1    #主机地址  
        scheme: HTTP
      tcpSocket:
        port: 80            #通过TCP方式检查
      exec:
        command: "xxxxx"    #使用SHELL方式检查
      # 也可使用如下方法:  
      #exec:                #执行命令的方法进行监测，如果其退出码不为0，则认为容器正常  
      #  command:  
      #    - cat  
      #    - /tmp/health  
                            #Container Lifecycle Hooks ...
    lifecycle:              #容器生命周期钩子监听容器生命周期的特定事件并在事件发生时执行已注册的回调函数
      postStart:            #容器启动后执行，由于是异步执行它无法保证一定在ENTRYPOINT之后运行~!
        exec:               #PostStart内的回调若执行失败则容器被杀死并根据RestartPolicy决定是否重启... 
          command:  
            - 'sh'  
            - 'yum upgrade -y'  
      preStop:              #容器停止前执行，常用于资源清理。若失败容器同样也会被杀死
        exec:  
          command: ["/usr/sbin/nginx","-s","quit"]
    volumeMounts:           #挂载到到容器内部的存储卷设置 （针对的是单个容器）
    - name: volume          #挂载设备的名字，与volumes[*].name 需对应    
      mountPath: /data      #挂载到容器的某个路径下  
      readOnly: True  
  volumes:                  #定义一组挂载设备（在该pod上定义共享存储卷）
  - name: volume            #定义挂载设备的名字  
    meptyDir: {}  
    hostPath:  
      path: /opt            #挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种  
