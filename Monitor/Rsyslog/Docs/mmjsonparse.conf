# By default, Elasticsearch does a good job of figuring the type of data in each field of your logs. 
# But if you like your logs structured like we do
# you probably want more control over how they’re indexed: is time_elapsed an integer or a float? 
# Do you want your tags analyzed so you can search for big in big data? Or do you need it not_analyzed
# so you can show top tags via the terms aggregation? Or maybe both?

# In this post, we’ll look at how to use index templates to manage multiple types of logs across multiple indices
# Also, we’ll explain how to use rsyslog to handle JSON logging and specify types.

#如果源码编译，请在运行configure脚本时指定: --enable-mmjsonparse
#如果使用yum，请安装包：yum -y install rsyslog-mmjsonparse

#名为mmjsonparse的模块用于处理CEE增强的系统日志消息，它检查消息开头的CEE规范的 "cookie"，然后尝试解析其下的JSON !
#若一切正常则加载JSON中的字段，然后即可在模板中使用它们来提取任何看似重要的信息!
#可以像这样访问JSON中的字段：$!field-name。( 变量: "$!all-json" 特指被mmjsonparse解析后的整个json串 )

#Example:
module(load="imuxsock")                 # can listen to local syslog socket
module(load="omelasticsearch")          # can forward to Elasticsearch

module(load="mmjsonparse")              # can parse JSON
action(type="mmjsonparse" cookie="")    # parse CEE-formatted messages ( cookie相当于json串之前的字串? )
#以上两行将激活模块并对所有消息应用规范化。

template(name="AAAABBBB" type="list") {
    # Elasticsearch文档将包含已解析的所有JSON字段 (下面的 $!all-json 变量代表了解析后的有效的JSON部分的内容 )
    property(name="$!all-json")     # 注：默认自带all-json属性
    # 对于非结构化的日志，$!all-json将生成一个名为"msg"的字段的JSON，将消息作为值
    # 之所以是 "msg"，因为这是系统日志消息的rsyslog属性名称
}

action(
    type="omelasticsearch"
    template="AAAABBBB"               # 使用前面定义的模板
    server="xx.xx.xx.xx:9200"
    searchIndex="LOGSENE-APP-TOKEN-GOES-HERE"
    searchType="syslogapp"
    bulkmode="on"                     # 批量发送
    queue.dequeuebatchsize="1000"     # of up to 1000
    action.resumeretrycount="-1"      # 当目标无法访问时进行无限期地重试（缓冲区）
)

#可通过读取 $parsesuccess 变量来检查rsyslogd是否能够成功解析消息：
action(type="mmjsonparse")

if $parsesuccess == "OK" then {
    action(type="omfile" File="/tmp/output")
}
else if $parsesuccess == "FAIL" then {
    action(type="omfile" File="/tmp/parsing_failure")
}


#要在Elasticsearch中索引日志，将使用名为omelasticsearch的rsyslog输出模块。与mmjsonparse一样，它默认情况下不会编译
#因此必须将-enable-elasticsearch参数添加到configure脚本，以便在运行make时生成。
#如果使用yum，则只需安装rsyslog-elasticsearch