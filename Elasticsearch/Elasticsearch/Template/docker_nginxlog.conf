input {
  kafka {
     bootstrap_servers => "172.22.241.162:9092", "172.22.241.163:9092", "172.22.241.164:9092"
     topics => "docker_nginxlog"
     group_id => "logstash-docker_nginxlog"
     max_partition_fetch_bytes=> "5242880"
     consumer_threads => "3"
     codec => "json"
   }
}

filter {
  mutate {
    split => ["message", " || "]
    add_field => {
      "time_local" => "%{[message][0]}"
      "remote_addr" => "%{[message][1]}"
      "upstream_addr" => "%{[message][2]}"
      "status" => "%{[message][3]}"
      "request_time" => "%{[message][4]}"
      "upstream_status" => "%{[message][5]}"
      "upstream_response_time" => "%{[message][6]}"
      "upstream_cache_status" => "%{[message][7]}"
      "body_bytes_sent" => "%{[message][8]}"
      "http_referer" => "%{[message][9]}"
      "remote_user" => "%{[message][10]}"
      "http_user_agent" => "%{[message][11]}"
      "http_x_forwarded_for" => "%{[message][12]}"
      "request" => "%{[message][13]}"
    }
  }
  
  mutate {
    copy => { "request" => "request_cp" }
  }

  mutate {
    split => ["request_cp", " "]
    add_field => {
      "url" => "%{[request_cp][1]}"
    }
  }

  mutate {
    copy => { "url" => "url_cp"}
  }

  mutate {
    split => ["url_cp", "?"]
    add_field => {
      "request_url" => "%{[url_cp][0]}"
    }
  }
  
  mutate {
    split => ["url", "/"]
    add_field => {
      "app_name" => "%{[url][1]}"
    }
  }  

  mutate {
    strip => ["request_url", "app_name", "time_local", "remote_addr", "upstream_addr", "status", "request_time", "upstream_status", "upstream_response_time", "upstream_cache_status", "body_bytes_sent", "http_referer", "remote_user", "http_user_agent", "http_x_forwarded_for", "request"]
  }
  
  date {
    match => [ "time_local", "dd/MMM/yyyy:HH:mm:ss ZZ" ]
    locale => "US"
    target => "@timestamp"
  }

  ruby {
    code => 'event.set("timestamp", event.get("@timestamp").time.localtime + 8*60*60)'
  }
 
  ruby {  
    code => "event.set('@timestamp',event.get('timestamp'))"  
  }

  ruby {  
    code =>'event.set("timeDistance", (event.get("@timestamp")-::Time.now).abs - 3 * 30 * 24 * 3600)'  
  }
 
  mutate {
    remove_field => ["url_cp", "url", "request_cp", "@version", "@metadata", "offset", "input", "beat", "host", "source", "prospector", "message", "timestamp"] 
  }
}

output {
  if[timeDistance] and [timeDistance] < 0 {
    elasticsearch {
      hosts => ["192.168.100.106:9200","192.168.100.107:9200"]
      index => "docker_nginx_%{+YYYY_MM_dd}"
      document_type => "nginx"
      action => "index"
      codec => "json"
    }
  }else{
    file {
      path => "/Users/yangmenglong/Desktop/nginx-error.log"
      flush_interval => 0
    }
  }

}
