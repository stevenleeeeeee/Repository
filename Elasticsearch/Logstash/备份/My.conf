# Beats -> Logstash -> Elasticsearch pipeline.
input {
        file {
                path => ["/tmp/wy.log"]
                #codec => "UTF-8"
                discover_interval => 1
                stat_interval => 1
                start_position => "beginning"
        }

        tcp {
                port => 666
                codec => plain {
                        #charset => "GBK"
                        charset => "UTF-8"
                }
        }
}


filter {
        # 这里使用自定义正则进行匹配,日志格式不统一,需要提供兼容性
        grok {
                patterns_dir => ["/etc/logstash/pattern_dir/patterns"]
                match => {
                        #"message" => "\[%{TIMESTAMP_ISO8601:creatTime}\]\s\[?(?<loglevel>\w+)\]?\s(?<className>[\w|.]+)\s-\s(?<info>.*)"
                        "message" => "\[?%{TIMESTAMP_ISO8601:creatime}\]?\s?+\[?(?<loglevel>\w+)\]?\s?+\[?(?<className>[\w|.]+)\]?\s?-?\s?(?<info>.*)"
                }
        }

        # 从字段中解析日志间戳
        date {
                match => ["[creatime]","yyyy-MM-dd HH:mm:ss","yyyy-MM-dd HH:mm:ss Z","yyyy-MM-dd HH:mm:ss.SSS","ISO8601"]
                target => "@timestamp"
                timezone => "Asia/Shanghai"
       }


        # 对info内容进行检查,判断消息内容生成对应key:value信息
        if [loglevel] == "ERROR" and [className] == "db.C" {
                if "insert" in [info] {
                        mutate { add_field => { "reason"  => "error about DB insert"}}
                }else if "update" in [info] {
                        mutate { add_field => { "reason"  => "error about DB update" }} 
                }else if "select" in [info] {
                        mutate { add_field => { "reason"  => "error about DB select" }}
                }else if "delete" in [info] {
                        mutate { add_field => { "reason"  => "error about DB delete" }}
                }else{
                        mutate { add_field => { "reason"  => "Non SQL execution error" }}
                }
        }

        # 捕获错误日志中导致错误的异常方法
        if [loglevel] == "ERROR" and "Exception occurred during processing request" in [info] {
                grok {
                        match => {
                                "message" => "\sMethod\s?..?(?<ErrorMethod>\w+)"
                        }
                }
        }
                      

        # 默认消息reason
        if ![reason] {
                mutate { add_field => { "reason"  => "nokown...." }}
        }
        # 默认异常方法
        if ![ErrorMethod] {
                 mutate { add_field => { "ErrorMethod"  => "Non ErrorMethod" }}
        }

        mutate {
                gsub => ["info","\r",""]                        # 去掉info中后缀的换行符"\r"
                #add_field => { "ip"  => "%{loglevel}" }        # 暂缺来源IP
                remove_field => ["message","creatime"]          # 删除原始消息
        }
}




output {

        stdout { codec => rubydebug }
#       if "_grokparsefailure" not in [tags] {
#               elasticsearch {
#
#               }
#       }
}